Hexer:
    Refactor hexer:
        -- File/Module based approach
        ✘ 'Types' -> hexer.types.moon @cancelled(20-03-13 08:32)
        ✘ 'Functions' -> hexer.functions.moon @cancelled(20-03-13 08:32)
        ✘ 'Module' -> hexer.moon @cancelled(20-03-13 08:32)
    ✘ Refactor hexer_spec.moon @cancelled(20-03-13 08:32)

Document with LDoc:
    ✘ hexer.moon @cancelled(20-03-13 08:32)
    ✔ mathShortcuts.moon @done(20-03-11 21:20)
    ✔ tableExt.moon @done(20-03-11 21:20)
    ✘ drawHexGrid.moon @cancelled(20-03-13 08:32)

Refactor drawHexGrid:
    ✘ MVC @cancelled(20-03-13 08:32)
        -- See 'Refactor hexer'
    ✘ use table of functions instead of elseif chains @cancelled(20-03-13 08:32)

Move to TypeScript:
    -- Gasp!
    -- I get
        . more familiar syntax
        . type checking
        . better packing management (or at least more reliable)
        . vscode integration
        . better platform support (Windows 10)
        . less dependencies (I don't need msys2 or mingw)

    -- f lua, it was a passionate love affair albeit brief

    ☐ add mocha
    ☐ add chai
    ☐ set config for typescript-to-lua
    ☐ set config for node
    ☐ set config for vscode 
    ☐ grafx2 declaration files

Keep it Functional:
    ☐ types.ts

? Build:
    ☐ build.ps1
    ☐ build.cmd